<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog - 后台</title><link href="/" rel="alternate"></link><link href="/feeds/hou-tai.atom.xml" rel="self"></link><id>/</id><updated>2017-12-02T22:47:12+08:00</updated><entry><title>用Docker实现Vue前端持续集成开发（上）</title><link href="/vue-docker.html" rel="alternate"></link><published>2017-12-02T22:47:08+08:00</published><updated>2017-12-02T22:47:12+08:00</updated><author><name>geons</name></author><id>tag:None,2017-12-02:/vue-docker.html</id><summary type="html">&lt;p&gt;专注后端的前端工程师&lt;/p&gt;</summary><content type="html">&lt;h2&gt;持续集成&lt;/h2&gt;
&lt;p&gt;传统讲来，持续集成无非就是将业务随着提交不断地进行构建、集成并部署到测试环境或生产环境，过去都是用脚本代替人工进行构建，在回滚和事务隔离上是致命弱点。因此，有了基于Docker的持续集成概念，本文以现学现卖的VUE例子，抛弃传统的部署方式，用容器技术快速打造一个开发部署环境，最引人注目的是在传统的事务回滚上加上了环境回滚，将版控提升了一层，个人觉得很好用。&lt;/p&gt;
&lt;h2&gt;流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代码在本地编写后提交到Github&lt;/li&gt;
&lt;li&gt;触发分支构建&lt;/li&gt;
&lt;li&gt;自动部署到服务器上&lt;/li&gt;
&lt;li&gt;版本可视化管理，支持环境回滚&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;初始化Vue项目&lt;/h2&gt;
&lt;h3&gt;使用vue-cli初始化项目&lt;/h3&gt;
&lt;p&gt;Vue-cli脚手架的具体用法请移步&lt;a href="http://geons.me/fast-study-vue.html"&gt;Vue脚手架-手摸手系列&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vue init webpack vue-docker-demo
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在项目的根目录下编写Dockerfile&lt;/h3&gt;
&lt;p&gt;&lt;img alt="dockerfile文件" src="http://oyc3sy7c4.bkt.clouddn.com/vue-docker-dockerfile.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# 使用Node精简版作为基础镜像&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:6.10.3-slim&lt;/span&gt;

&lt;span class="c"&gt;# 安装nginx&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update &lt;span class="se"&gt;\ &lt;/span&gt;   
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y nginx

&lt;span class="c"&gt;# 指定工作目录&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# 当前目录拷贝到工作目录下&lt;/span&gt;
COPY . /app/

&lt;span class="c"&gt;# 声明运行时容器提供服务端口&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 80&lt;/span&gt;

&lt;span class="c"&gt;# 安装依赖&lt;/span&gt;
&lt;span class="c"&gt;# build&lt;/span&gt;
&lt;span class="c"&gt;# 拷贝到ng目录下&lt;/span&gt;
&lt;span class="c"&gt;# 删除目录文件&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt;  npm install &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run build &lt;span class="se"&gt;\ &lt;/span&gt;    
     &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cp -r dist/* /var/www/html &lt;span class="se"&gt;\ &lt;/span&gt;    
     &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /app

&lt;span class="c"&gt;# 以前台形式启动ng&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [&amp;quot;nginx&amp;quot;,&amp;quot;-g&amp;quot;,&amp;quot;daemon off;&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;推送到github上&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;单独建立一个仓库，这样便于维护和部署
至此，我们的开发代码已经成功版本控制了，接下来是使用Devops流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;使用DaoCloud搭建Devops流程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这里只是举例使用DaoCloud，其他公有云平台也可以做到的，只是这个对个人独立开发者比较OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;注册一个DaoCloud并授权Github仓库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户中心&lt;/li&gt;
&lt;li&gt;代码托管&lt;/li&gt;
&lt;li&gt;授权访问Github仓库&lt;blockquote&gt;
&lt;p&gt;注册流程就不详细说了，关键一点是授权Github仓库，也就是你源码管理的仓库，这样就可以直接关联到你的GitHub。本人在授权过程中，忽略了一个问题，因为github之前授权给了很老的一个号，是不能同时授权的，所以幸好找回了老号码接触了绑定，希望大家不要犯这样的低级错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;在Devops中新建一个项目&lt;/h3&gt;
&lt;p&gt;新建后选择对应的github项目，也就是vue-docker-demo所在的仓库。&lt;/p&gt;
&lt;h3&gt;构建镜像版本，准备好创建一个应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;选择“手动触发”&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;触发方式选择master分支
&lt;img alt="创建镜像" src="https://user-gold-cdn.xitu.io/2017/11/21/15fdf12d8a14e5ea?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;镜像构建成功后可在镜像仓库中查看
&lt;img alt="镜像" src="https://user-gold-cdn.xitu.io/2017/11/21/15fdf152e156f10d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;部署到云端测试环境或者自己主机中&lt;/h3&gt;
&lt;p&gt;Daocloud提供了胶囊主机，可以做临时的开发测试使用，如果是正式开发环境建议购买主机，将主机接入集群中，进行统一管理。
官网提供了很完善的自有主机接入教程，这里不再详细展开
&lt;img alt="主机" src="https://user-gold-cdn.xitu.io/2017/11/21/15fdf0e8b7f97804?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"&gt;
接入主机后，可以在面板看到集群中已经有1台主机正常运行。
&lt;img alt="主机" src="https://user-gold-cdn.xitu.io/2017/11/21/15fdf1d36fd5a210?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"&gt;&lt;/p&gt;
&lt;h3&gt;创建第一个应用！&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;进入镜像仓库，选择刚刚构建出来的镜像进行部署，应用和镜像的关系可以查看Docker官方文档区分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="https://user-gold-cdn.xitu.io/2017/11/21/15fdf1c416ab9539?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"&gt;
&lt;img alt="" src="https://user-gold-cdn.xitu.io/2017/11/21/15fdf1f270b7eb89?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接下来的时间就是静候镜拉取，容器启动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;外网访问我们的Vue应用！&lt;/h3&gt;
&lt;p&gt;可以看到刚刚部署的应用已经成功了！
点击容器卡的端口，选择外网访问的入口，即可外网访问到应用
&lt;img alt="" src="http://oyc3sy7c4.bkt.clouddn.com/vue-docker-daocloud.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里不仅可以很直观查看应用的状况，还能够对整个容器进行监控，还有云隧道、迁移、发布等选项，很方便的完成负责的环境部署等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;自定义构建和发布&lt;/h2&gt;
&lt;p&gt;请移步&lt;a href=""&gt;用Docker实现Vue前端持续集成开发（下）&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;从整个流程来看，我们没有关心任何生产环境的配置等等，专注的编写好vue业务，然后就让外网用户访问到了，只花了半小时时间，足见docker进行开发部署的方便，当然，这是一个单点应用Demo，没有涉及到负责的nginx配置，负载均衡，日志Col，灰度发布等，在后面的文章中会介绍docker更多的用处。&lt;/p&gt;</content><category term="docker"></category><category term="vue"></category><category term="持续集成"></category></entry><entry><title>Redis Windows64位安装启动</title><link href="/redis-win.html" rel="alternate"></link><published>2017-11-26T16:30:04+08:00</published><updated>2017-11-26T16:30:10+08:00</updated><author><name>geons</name></author><id>tag:None,2017-11-26:/redis-win.html</id><summary type="html">&lt;p&gt;专注后端的前端工程师&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Redis(Win64)下载地址&lt;/h2&gt;
&lt;p&gt;官方是不支持win版的，不过Microsoft Open Tech group 在Github上开发了一个win64Redis项目，地址是&lt;a href="https://github.com/MSOpenTech/redis"&gt;https://github.com/MSOpenTech/redis&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Redis安装&lt;/h2&gt;
&lt;p&gt;msi格式安装，Redis会以service形式运行，整个目录结构是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-benchmark.exe // 基准测试
redis-check-aof.exe // aof
redis-check-dump.exe // dump 
redis-cli.exe   // redis客户端
redis-server.exe // redis服务端
redis.windows.conf // 配置文件
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;基本命令&lt;/h2&gt;
&lt;h3&gt;Redis服务启动&lt;/h3&gt;
&lt;p&gt;从命令行以服务形式启动Redis&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server redis.windows.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server --service-start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;停止Redis服务&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server --service-stop
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;卸载Redis服务&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server --service-uninstall
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;指定Redis服务&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server --service-install -server-name myRedisName -port &lt;span class="m"&gt;10001&lt;/span&gt;

redis-server --service-start -server-name MyRedisName -port &lt;span class="m"&gt;10001&lt;/span&gt;

redis-server --service-stop -server-name MyRedisName -port &lt;span class="m"&gt;10001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="redis"></category></entry><entry><title>使用socketio和nodejs快速打造IM聊天室</title><link href="/socketio-1.html" rel="alternate"></link><published>2017-11-26T16:30:04+08:00</published><updated>2017-11-26T16:30:10+08:00</updated><author><name>geons</name></author><id>tag:None,2017-11-26:/socketio-1.html</id><summary type="html">&lt;p&gt;专注后端的前端工程师&lt;/p&gt;</summary><content type="html">&lt;h2&gt;现有的Websocket方案&lt;/h2&gt;</content><category term="socket.io"></category><category term="nodejs"></category></entry></feed>