<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog - geons</title><link href="/" rel="alternate"></link><link href="/feeds/geons.atom.xml" rel="self"></link><id>/</id><updated>2017-11-26T16:30:10+08:00</updated><entry><title>Redis Windows64位安装启动</title><link href="/redis-win.html" rel="alternate"></link><published>2017-11-26T16:30:04+08:00</published><updated>2017-11-26T16:30:10+08:00</updated><author><name>geons</name></author><id>tag:None,2017-11-26:/redis-win.html</id><summary type="html">&lt;p&gt;专注后端的前端工程师&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Redis(Win64)下载地址&lt;/h2&gt;
&lt;p&gt;官方是不支持win版的，不过Microsoft Open Tech group 在Github上开发了一个win64Redis项目，地址是&lt;a href="https://github.com/MSOpenTech/redis"&gt;https://github.com/MSOpenTech/redis&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Redis安装&lt;/h2&gt;
&lt;p&gt;msi格式安装，Redis会以service形式运行，整个目录结构是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-benchmark.exe // 基准测试
redis-check-aof.exe // aof
redis-check-dump.exe // dump 
redis-cli.exe   // redis客户端
redis-server.exe // redis服务端
redis.windows.conf // 配置文件
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;基本命令&lt;/h2&gt;
&lt;h3&gt;Redis服务启动&lt;/h3&gt;
&lt;p&gt;从命令行以服务形式启动Redis&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server redis.windows.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server --service-start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;停止Redis服务&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server --service-stop
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;卸载Redis服务&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server --service-uninstall
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;指定Redis服务&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server --service-install -server-name myRedisName -port &lt;span class="m"&gt;10001&lt;/span&gt;

redis-server --service-start -server-name MyRedisName -port &lt;span class="m"&gt;10001&lt;/span&gt;

redis-server --service-stop -server-name MyRedisName -port &lt;span class="m"&gt;10001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="redis"></category></entry><entry><title>debian下crontab执行时间不准确</title><link href="/debian-cron-time.html" rel="alternate"></link><published>2017-11-19T16:19:31+08:00</published><updated>2017-11-19T16:19:36+08:00</updated><author><name>geons</name></author><id>tag:None,2017-11-19:/debian-cron-time.html</id><summary type="html">&lt;p&gt;crontab和cmos时间统一&lt;/p&gt;</summary><content type="html">&lt;h2&gt;遇到问题&lt;/h2&gt;
&lt;p&gt;重启了VPS后发现crontab定时任务执行时间不正确，并且与北京时间相差了8个小时，很明显是crontab定时任务依据的时间不是UTC时间，因此需要将BIOS时间和系统时间同步，&lt;/p&gt;
&lt;h2&gt;初步解决&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#date&lt;/span&gt;
Mon Jun &lt;span class="m"&gt;25&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:34:18 CST &lt;span class="m"&gt;2012&lt;/span&gt;
&lt;span class="c1"&gt;#date -u&lt;/span&gt;
Mon Jun &lt;span class="m"&gt;25&lt;/span&gt; &lt;span class="m"&gt;06&lt;/span&gt;:34:29 UTC &lt;span class="m"&gt;2012&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;显示的本地时间和UTC的时间都是正常的，但是显示我那系统crontab执行的时间是按照UTC时间来了，于是我再次设置了下时区为国内的，记得我之前好像设置过了，不过还是尝试一下,删除原来的时区文件，又重新复制到本地&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm /etc/localtime
cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后vi /etc/localtime 查看了下时区文件，确实是CST-8,再向crontab里添加一个测试脚本，重启cron&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/cron restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;发现它依然没有按照国内的时间来执行，之前也没遇到过问题，而且同样的设置，目前另外的机子上也正常执行，最后才想起我这个用的是debian系统，&lt;strong&gt;debian系统下面，仅是设置/etc/localtime是不够的，更加需要的是/etc/timezone这个文件&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;使用tzconfig&lt;/h2&gt;
&lt;p&gt;最后用了tzselect程序来设置时区，运行tzselect命令后，按照自己要的时间选择选项，最后选1保存确认即可。再次重启cron，添加测试任务，这次终于按照本地时间运行了，如果不行就重新登录一下或者重启下。&lt;/p&gt;
&lt;h2&gt;使用hwclock&lt;/h2&gt;
&lt;p&gt;使用&lt;strong&gt;sudo hwclock&lt;/strong&gt;修改硬件时间，设置时间同步&lt;/p&gt;
&lt;h2&gt;相关资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tech1024.cn/reprint/1618.html"&gt;Debian下系统时间比正常时间快8小时的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="crontab debian"></category></entry><entry><title>Vue-cli脚手架-手摸手系列</title><link href="/fast-study-vue.html" rel="alternate"></link><published>2017-10-25T00:59:08+08:00</published><updated>2017-11-19T15:56:06+08:00</updated><author><name>geons</name></author><id>tag:None,2017-10-25:/fast-study-vue.html</id><summary type="html">&lt;p&gt;专注后端的前端工程师&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Vue新特性&lt;/h2&gt;
&lt;p&gt;Vue的特别之处在于抛弃了DOM操作思维，Vue.js是数据驱动的，任何适合都是根据数据来保持视图的更新，当然，在使用时候，完成一些简单的业务处理也是需要jQuery或者js。&lt;/p&gt;
&lt;p&gt;本文主要是Vue-cli，俗称Vue的脚手架介绍，快速入门Vue开发。Vue-cli是vue工程开发的脚手架，可以自动生成vue模版，并且和webpack紧密结合一键式完成vue整个项目的开发环境部署。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oyc3sy7c4.bkt.clouddn.com/upload_vue_mvvm.png"&gt;&lt;/p&gt;
&lt;h2&gt;vue-cli使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装nodejs环境&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://nodejs.org/en/"&gt;Nodejs下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局安装vue-cli脚手架&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install vue-cli -g&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用webpack初始化项目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vue init webpack my_project&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入项目文件夹，使用npm安装依赖&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cd my_project&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装依赖（根据package.json安装）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成后的完整目录（具体的文件作用请阅读参考）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;my_project&lt;/span&gt;
 &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="c1"&gt;## 打包发布的参数配置&lt;/span&gt;
 &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="c1"&gt;## webpack打包参数配置&lt;/span&gt;
 &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="c1"&gt;## 开发源代码&lt;/span&gt;
 &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="c1"&gt;## 静态文件&lt;/span&gt;
 &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="c1"&gt;## 其他配置文件&lt;/span&gt;
 &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="c1"&gt;## 打包好的文件目录，只有一个index和打包好的js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开发环境运行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm run dev
此时打开浏览器localhost:8080即可看到主页&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;build到开发环境，生成的文件在dst目录里面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm run build&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意这里比较坑的是，默认的引用路径需要修改，进入config/index.js文件，修改为assetPublicPath:'./'，设定为当前目录&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;整个vue-cli就基本上完成了，不过在实际开发中可能还会根据不同的情况调整不同的参数。&lt;/p&gt;
&lt;h2&gt;有用的资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gold.xitu.io/post/5860eebe1b69e6006ce1395c"&gt;史上最简单的 Angular2教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.webpack-china.org/guides/"&gt;webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cn.vuejs.org/v2/guide/comparison.html"&gt;Vue官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/keepfool/p/5619070.html"&gt;VueJs技术文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.guowenfh.com/2016/03/24/vue-webpack-01-base/"&gt;webpack入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000009291545"&gt;vue-cli脚手架使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://es6.ruanyifeng.com/#docs/intro"&gt;ECS6新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codeguide.bootcss.com/"&gt;前端编码规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cuiqingcai.com/1052.html"&gt;Python爬虫技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.the5fire.com/the-way-to-explore-django-source-code-by-the5fire-part1.html"&gt;Django源码阅读方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/daoluan/decode-Django"&gt;Django源码分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="vue"></category></entry><entry><title>快速搭建Pelican+GithubPage静态博客</title><link href="/fast-make-pelican-blog.html" rel="alternate"></link><published>2017-10-24T00:36:17+08:00</published><updated>2017-10-24T00:36:26+08:00</updated><author><name>geons</name></author><id>tag:None,2017-10-24:/fast-make-pelican-blog.html</id><summary type="html">&lt;p&gt;base on pelican&lt;/p&gt;</summary><content type="html">&lt;h2&gt;准备工作&lt;/h2&gt;
&lt;p&gt;&amp;emsp;在国内，Pelican的知名度和没有国外那么高，因此也没有几篇像模像样的教程，本文介绍Pelican+GithubPage进行快速博客搭建的方法，Windows和Linux平台差别不大，文章以Windows平台。&lt;/p&gt;
&lt;h2&gt;安装Pelican&lt;/h2&gt;
&lt;p&gt;&amp;emsp;在Windows下搭建pelican环境可以说完爆Jekyll,如果熟悉Python，甚至比Hexo还要简单，闲话不多说，直接开干。首先安装Python环境，我安装的是Python2.7，如果你需要Python3.6.1，也可以安装，没有任何问题。建议你先安装pip。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;easy_install&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;安装完Python后，使用pip很方便安装pelican和markdown。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
    &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now，你的Pelican环境已经搭建好了，So Ez？&lt;/p&gt;
&lt;h2&gt;创建博客&lt;/h2&gt;
&lt;p&gt;&amp;emsp;在一个空白的文件夹里面打开cmd，使用命令快速建立博客模板。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;进入quickstart配置过程后，这些设置会生成对应的pelicanconf.py配置文件和Makefile文件，不过Windows下由于不能使用Makefile，所以这里即使填错选项也可以待会在修改。因此，这个你可以根据你的实际需要完成。完成后可见如下文件目录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="c1"&gt;# 博文目录&lt;/span&gt;
    &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="c1"&gt;# html生成目录&lt;/span&gt;
    &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;fabfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;# Deploy设置相关&lt;/span&gt;
    &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt; &lt;span class="c1"&gt;# 自动构建目录&lt;/span&gt;
    &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;pelicanconfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;# 配置文件&lt;/span&gt;
    &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;publishconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;# 发布时配置文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;注意的是publishconf.py完全导入pelicanconf.py文件，所以前者用于本地调试使用，后者发布时自动替换某些属性，例如SITEURL，不过由于我们不使用Makefile，所以直接使用pelicanconf.py文件即可，它的配置方法比较多，针对不同的主题模板有不同的配置方法，这里不能给出具体的配置，初次搭建，可以不用任何配置。&lt;/p&gt;
&lt;p&gt;&amp;emsp;fabfile.py里面包括各种Deploy相关的配置和操作，可以在里面修改默认的本地服务器端口（80），一般来说都不需要修改。你也可以在Deploy时候修改各类参数，都没有任何问题。&lt;/p&gt;
&lt;h2&gt;编写文章&lt;/h2&gt;
&lt;p&gt;&amp;emsp;我们首先写一篇HelloPelican文章然后生成发布到本地瞧瞧是怎么个样子。上文说过content目录是用来存放博文等文件目录的，直接在目录里面新建一个文件test.md(本文使用MarkDown来编辑，pelican也支reStructuredText)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HelloPelican&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;geons&lt;/span&gt;

&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;
&lt;span class="n"&gt;Text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;注意：Title等字段用来声明博客的属性，Slug为对应生成html的相对路径，如果上述最终生成路径是blog目录下的hello.html,这些字段还可以自定义，这个进阶内容可以后面再说。出去属性声明外的部分都是正文内容，##First就是正文的开始了。你可以用markdown随心所欲编写你的内容。&lt;/p&gt;
&lt;h2&gt;生成静态HTML&lt;/h2&gt;
&lt;p&gt;&amp;emsp;发布后的博客其实是一个单纯如少女的HTML静态文件，所以，这样很安全的，你不用担心数据库安全。使用如下命令进行HTML静态文件生成。生成好的文件在output目录，因此，output目录就是我们要发布的文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;生成成功后，在当前目录下，你可以使用下面命令启动server，通过浏览器可以访问到你的页面，你可以自定义端口，也可以空缺，默认采用80端口访问。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果没有任何的报错信息，服务器已经启动成功，可以通过http://127.0.0.1:80进行访问。&lt;/p&gt;
&lt;h2&gt;静态资源文件&lt;/h2&gt;
&lt;p&gt;&amp;emsp;通过上文，我们已经成功添加第一篇博客，但是很快会发现，如果你往content目录里面添加一个images文件夹存放博文的图片，你会发现&lt;code&gt;pelican content&lt;/code&gt;并不会复制images文件夹到output目录下。这种不需要编译但又要用到的文件，我们称它为“静态文件”。pelican默认不会复制静态文件到output目录，需要我们在pelicanconf.py配置文件上面配置一下,添加一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;这样就会生成output资源时就会自动把iamges文件夹拷贝到output目录了。另外使用EXTRA_PATH_METADATA也可以把某个目录的文件映射过去，例如favicon.ico放在content/extra目录下，最后需要生成到output的根目录，可以添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;说到这里，你可能会想，static目录岂不是会持续增量，当然，我也有一个不错的方案告诉你，用七牛云的数据存储空间，进行静态文件的存储，在访问速度和安全性上都是不错的，七牛云的服务我会在下篇文章介绍。&lt;/p&gt;
&lt;h2&gt;自动渲染&lt;/h2&gt;
&lt;p&gt;&amp;emsp;由于Win下不能使用makefile，因此不能使用&lt;code&gt;make html&lt;/code&gt;命令进行生成。因此，写个批处理文件，实现渲染和重启服务器。脚本代码如下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@echo off
setlocal enabledelayedexpansion
for /f &amp;quot;delims=  tokens=1&amp;quot; %%i in (&amp;#39;netstat -aon ^| findstr &amp;quot;8000&amp;quot;&amp;#39;) do (
    set a=%%i
    goto job
)
:job
taskkill /F /pid &amp;quot;!a:~71,5!&amp;quot;
pelican content
cd output
start cmd /c &amp;quot;python -m pelican.server 8000&amp;quot;
cd ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;上面的代码内容是找到已经运行的服务器程序，结束它，然后重新生成Output文件，并且重新打开本地服务器。如果要修改端口可以替换bat文件中的端口号。有了这个脚本，以后需要更新预览，只需要在博客目录下打开cmd，输入auto-update.bat，敲一下回车就能自动完成了，或者你可以直接双击启动，很放ez吧。&lt;/p&gt;
&lt;h2&gt;开始发布&lt;/h2&gt;
&lt;p&gt;&amp;emsp;关于GithubPage的搭建我不做详细介绍，因为资料很多，你只需要简单的通过GitHub Doc能够快速搭建自己的github.io，我们只需要将output目录下的文件提交到github.io即可，外网就可以通过访问xxx.gethub.io访问到你的博客主页。很简单，把Github.io项目拉下来，用Output目录里面的内容替换掉，push上去刷新就能看到了。不过这里需要注意的是是否配置了RELATIVE_URLS这个相对路径设置，SITEURL也要设置成Pages的地址，否者Feed的xml地址将显示不完全，编译的时候也会提示： "WARNING: Feeds generated without SITEURL set properly may not be valid"。所以这些都要手动检查清楚后再发布。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我猜，你已经想拥有自己的域名，那就更简单了，仍然按照gihub doc进行DNS解析，注意一定访问官方提供的方法，因为解析IP可能有变动。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;最后的话&lt;/h2&gt;
&lt;p&gt;通过以上的步骤，至少本地已经可以访问到博客了，因此，Pelican门槛是非常非常低的，非常便利。作者提供一些优化思路。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;七牛云静态资源存储&lt;/li&gt;
&lt;li&gt;博客目录和发布目录分两个仓库&lt;/li&gt;
&lt;li&gt;增加评论功能&lt;/li&gt;
&lt;li&gt;阅读主题模板源码，修改模板&lt;/li&gt;
&lt;li&gt;阅读Pelican源码，部署到Nginx上提升性能&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考文章&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&lt;a href="http://docs.getpelican.com/en/3.7.1/index.html"&gt;Pelican官方文档&lt;/a&gt;&lt;/p&gt;</content><category term="pelican github"></category></entry></feed>